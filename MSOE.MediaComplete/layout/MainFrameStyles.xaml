<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=TreeViewEx"
                    xmlns:customControls="clr-namespace:MSOE.MediaComplete.CustomControls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Styles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type controls:TreeViewEx}">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>
    <Style TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>

    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>
    
    <Style TargetType="{x:Type ListView}" x:Key="ExternalScrollView" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter></ItemsPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type customControls:PlaylistSongItem}">
        <Style.Triggers>
            <Trigger Property="IsMouseDirectlyOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TextMouseOverBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextMouseOverForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource TextSelectedForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPlaying" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource CurrentSong}"/>
                <Setter Property="FontWeight" Value="ExtraBold"/>
            </Trigger>
            <Trigger Property="IsPlaying" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                <Setter Property="FontWeight" Value="Normal"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type customControls:LibrarySongItem}">
        <Style.Triggers>
            <Trigger Property="IsMouseDirectlyOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TextMouseOverBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextMouseOverForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource TextSelectedForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type controls:TreeViewExItem}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BackgroundFocused" Value="Transparent"/>
        <Setter Property="BackgroundSelected" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
        <Setter Property="BackgroundSelectedPreview" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource TextMouseOverBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextMouseOverForegroundBrush}"/>
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BackgroundFocused" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextSelectedForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0,1,0,1"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource TextMouseOverBackgroundBrush}"/>
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextSelectedForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="2"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="PlaylistNameTextbox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{DynamicResource PanelBrush}"/>
    </Style>
    
    <Style TargetType="{x:Type GridSplitter}" x:Key="SplitterStyle">
        <Setter Property="Background" Value="Transparent"></Setter>
    </Style>
    <Style TargetType="{x:Type Panel}" x:Key="PanelStyle">
        <Setter Property="Background" Value="{DynamicResource PanelBrush}"/>
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="ToolbarImportFile" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle Height="22" Width="22" Style="{DynamicResource ToolbarRectangleStyle}"/>
                        <Polygon Points="6,4 13,4 17,8 17,18 6,18" Fill="{DynamicResource ToolbarButtonPrimaryBrush}" />
                        <Polygon Points="10,17 13,17 13,20 16,20 16,17 19,17 19,14 16,14 16,11 13,11 13,14 10,14 " Fill="{DynamicResource ToolbarButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="ToolbarImportFolder" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle Height="22" Width="22" Style="{DynamicResource ToolbarRectangleStyle}"/>
                        <Polygon Points="4,4 8,4 10,6 18,6 18,18, 4,18" Fill="{DynamicResource ToolbarButtonPrimaryBrush}" />
                        <Polygon Points="10,17 13,17 13,20 16,20 16,17 19,17 19,14 16,14 16,11 13,11 13,14 10,14 " Fill="{DynamicResource ToolbarButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ToolbarPopulateMetadata" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle Height="22" Width="22" Style="{DynamicResource ToolbarRectangleStyle}"/>
                        <Polygon Points="4,16 4,18 18,18 18,16" Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                        <Polygon Points="10,4 10,11 8,11 11,15 14,11 12,11 12,4" Fill="{DynamicResource ToolbarButtonAccentBrush}"/>
                        <Polygon Points="5,4 4,5 7,8 6,9 9,9 9,6 8,7 " Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                        <Polygon Points="17,4 18,5 15,8 16,9 13,9 13,6 14,7 " Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ToolbarSort" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle Height="22" Width="22" Style="{DynamicResource ToolbarRectangleStyle}"/>
                        <Polygon Points="4,4 4,8 15,8 15,6 6,6 6,4" Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                        <Polygon Points="4,10 4,12 15,12 15,10" Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                        <Polygon Points="4,14 4,18 6,18 6,16 15,16 15,14" Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                        <Polygon Points=" 15,9 18,7 15,5" Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                        <Polygon Points="15,13 18,11 15,9" Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                        <Polygon Points="15,17 18,14 15,13" Fill="{DynamicResource ToolbarButtonPrimaryBrush}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolbarRectangleStyle" TargetType="{x:Type Rectangle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource ButtonDefaultBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="False">
                <Setter Property="Fill" Value="{DynamicResource ToolbarBackgroundBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>