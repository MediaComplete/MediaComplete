<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=TreeViewEx">
    <Style TargetType="{x:Type controls:TreeViewEx}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>

    <Style TargetType="{x:Type ListView}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{DynamicResource TabTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border  Name="Border" Margin="0,0,-4,0" BorderThickness="1,1,1,1" CornerRadius="2,12,0,0" >
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12,2,12,2" RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabSelectedBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabNotSelectedBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabMouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type controls:TreeViewExItem}">
        <Setter Property="BackgroundSelected" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
        <Setter Property="BackgroundSelectedPreview" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseDirectlyOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TextMouseOverBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextMouseOverForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BackgroundFocused" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextSelectedForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="BackgroundFocused" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <Trigger Property="IsMouseDirectlyOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TextMouseOverBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextMouseOverForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextSelectedBackgroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource TextSelectedForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ButtonDefaultBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonAccentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bg" Background="{TemplateBinding Background}" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonDefaultHoverBrush}" TargetName="bg" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="15" />
            </Grid.ColumnDefinitions>
            <Border
              x:Name="Border" 
              Grid.ColumnSpan="2"
              CornerRadius="0"
              Background="{DynamicResource NormalBrush}"
              BorderBrush="{DynamicResource NormalBorderBrush}"
              BorderThickness="1" />
            <Border 
              Grid.Column="0"
              CornerRadius="0,0,0,0" 
              Margin="1" 
              Background="{DynamicResource WindowBackgroundBrush}" 
              BorderBrush="{DynamicResource NormalBorderBrush}"
              BorderThickness="0,0,0,0" />
            <Path 
              x:Name="Arrow"
              Grid.Column="1"     
              Fill="{DynamicResource GlyphBrush}"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Data="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="ComboBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Margin" Value="4, 0, 8, 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                            Name="ContentSite"
                            IsHitTestVisible="False" 
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                                Style="{x:Null}" 
                                Template="{StaticResource ComboBoxTextBox}" 
                                HorizontalAlignment="Left" 
                                VerticalAlignment="Center" 
                                Margin="3,3,23,3"
                                Focusable="True" 
                                Background="Transparent"
                                Visibility="Hidden"
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" >
                            <Grid 
                                  Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource WindowBackgroundBrush}"
                                    BorderThickness="1"
                                    BorderBrush="{DynamicResource SolidBorderBrush}"
                                    CornerRadius="0,0,0,0" />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"
                            Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EllipseStyle" TargetType="{x:Type Ellipse}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource ButtonDefaultHoverBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="False">
                <Setter Property="Fill" Value="{DynamicResource ButtonDefaultBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="PlayButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{StaticResource EllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Polygon Points="27,15 27,60 60,37.5" Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="PauseButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{StaticResource EllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Polygon Points="20,15 35,15 35,60 20,60 " Fill="{DynamicResource ButtonAccentBrush}" />
                        <Polygon Points="40,15 55,15 55,60 40,60 " Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="StopButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{StaticResource EllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Polygon Points="12,12 12,28 28,28 28,12" Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="SkipButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{StaticResource EllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                        <Polygon Points="18,20 18,40 33,30" Fill="{DynamicResource ButtonAccentBrush}" />
                        <Polygon Points="33,20 33,40 48,30" Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="PreviousButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{StaticResource EllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                        <Polygon Points="27,20 27,40 12,30" Fill="{DynamicResource ButtonAccentBrush}" />
                        <Polygon Points="42,20 42,40 27,30" Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="Plus/Minus" >
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bg"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center"
                                VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
                <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundDisabledBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundDisabledBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderDisabledBrush}"/>

            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type GridSplitter}" x:Key="SplitterStyle">
        <Setter Property="Background" Value="Transparent"></Setter>
    </Style>
    <Style TargetType="{x:Type Panel}" x:Key="PanelStyle">
        <Setter Property="Background" Value="{DynamicResource PanelBrush}"/>
    </Style>
    <Style TargetType="{x:Type Menu}" x:Key="MenuStyle">
        <Setter Property="Background" Value="{DynamicResource MenuBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    </Style>
    <Style TargetType="{x:Type MenuItem}" x:Key="MenuItemStyle">
        <Setter Property="Foreground" Value="Black"/>
    </Style>
    <Style TargetType="{x:Type ToolBarPanel}" x:Key="ToolBarPanelStyle">
        <Setter Property="Background" Value="{DynamicResource ToolbarBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type ToolBar}" x:Key="ToolBarStyle">
        <Setter Property="Background" Value="{DynamicResource ToolbarBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type Grid}" x:Key="DetailGridStyle">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type Grid}" x:Key="GridStyle">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type StatusBar}" x:Key="StatusBarStyle">
        <Setter Property="Background" Value="{DynamicResource StatusBarBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type RadioButton}" x:Key="RadioStyle">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="TextBlockStyle">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource DefaultBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxStyle">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource DefaultBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type StatusBarItem}" x:Key="StatusBarItemStyle">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    </Style>
    <Style TargetType="{x:Type Border}" x:Key="BorderStyle">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>
    <Style TargetType="{x:Type Rectangle}" x:Key="VolumeFillColor">
        <Setter Property="Fill" Value="{DynamicResource VolumeFillBrush}" />
    </Style>
    <Style TargetType="{x:Type Rectangle}" x:Key="VolumeBarColor">
        <Setter Property="Fill" Value="{DynamicResource VolumeBarBrush}"/>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="LoopButtonPressed" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{DynamicResource PressedEllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Ellipse Height="17" Width="17" Fill="{DynamicResource ButtonAccentBrush}" />
                        <Ellipse Style="{DynamicResource PressedEllipseStyle}" Height="13" Width="13" />
                        <Polygon Style="{DynamicResource PressedPolygonStyle}" Points="13,3 19,3 19,10 13,10" />
                        <Polygon Points="10.5,6 12,13.5 14.25,9" Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="LoopButtonUnPressed" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{StaticResource EllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Ellipse Height="17" Width="17" Fill="{DynamicResource ButtonAccentBrush}" />
                        <Ellipse Style="{StaticResource EllipseStyle}" Height="13" Width="13" />
                        <Polygon Style="{DynamicResource PolygonStyle}" Points="13,3 19,3 19,10 13,10" />
                        <Polygon Points="10.5,6 12,13.5 14.25,9" Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="LoopOneButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{DynamicResource PressedEllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Ellipse Height="17" Width="17" Fill="{DynamicResource ButtonAccentBrush}" />
                        <Ellipse Style="{DynamicResource PressedEllipseStyle}" Height="13" Width="13" />
                        <Polygon Style="{DynamicResource PressedPolygonStyle}" Points="13,3 19,3 19,10 13,10" />
                        <Polygon Points="10.5,6 12,13.5 14.25,9" Fill="{DynamicResource ButtonAccentBrush}" />
                        <Polygon Points="17,4 13,6 15,6 15,11 17,11" Fill="{DynamicResource ButtonAccentBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PolygonStyle" TargetType="{x:Type Polygon}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource ButtonDefaultHoverBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="False">
                <Setter Property="Fill" Value="{DynamicResource ButtonDefaultBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PressedEllipseStyle" TargetType="{x:Type Ellipse}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource ButtonToggledHoverBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="False">
                <Setter Property="Fill" Value="{DynamicResource ButtonToggledBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PressedPolygonStyle" TargetType="{x:Type Polygon}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                <Setter Property="Fill" Value="{DynamicResource ButtonToggledHoverBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid,AncestorLevel=1}, Path=IsMouseOver}" Value="False">
                <Setter Property="Fill" Value="{DynamicResource ButtonToggledBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>



    <Style TargetType="{x:Type Button}" x:Key="ShuffleButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Style="{DynamicResource EllipseStyle}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                        <Polygon Points="10,4 7,8 9,8 9,13 19,18 19,24 21,24 21,18 11,13 11,8 13,8" Fill="#FFF0EFF1" />
                        <Polygon Points="20,4 17,8 21,8 21,13 11,18 11,24 9,24 9,18 19,13 19,8 23,8" Fill="#FFF0EFF1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>